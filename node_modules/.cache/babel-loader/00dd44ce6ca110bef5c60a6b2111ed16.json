{"ast":null,"code":"import useVuelidate from '@vuelidate/core';\nimport { required, email, minLength } from '@vuelidate/validators';\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n\n  data() {\n    return {\n      form: {\n        email: '',\n        password: ''\n      }\n    };\n  },\n\n  validations() {\n    return {\n      form: {\n        email: {\n          required,\n          email\n        },\n        password: {\n          required,\n          min: minLength(6)\n        }\n      }\n    };\n  },\n\n  methods: {\n    async onSubmit() {\n      const formData = {\n        email: this.form.email,\n        password: this.form.password\n      };\n      await this.form.$store.dispach('login', formData);\n      this.$router.push('/');\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA2CA,OAAOA,YAAP,MAAyB,iBAAzB;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,SAA1B,QAA2C,uBAA3C;AAEA,eAAe;AACbC,OAAI,GAAK;AACP,WAAO;AAAEC,QAAE,EAAEL,YAAY;AAAlB,KAAP;AACD,GAHY;;AAKbM,MAAG,GAAK;AACN,WAAO;AACLC,UAAI,EAAE;AACJL,aAAK,EAAE,EADH;AAEJM,gBAAQ,EAAE;AAFN;AADD,KAAP;AAMD,GAZY;;AAabC,aAAU,GAAK;AACb,WAAO;AACLF,UAAI,EAAE;AACJL,aAAK,EAAE;AACLD,kBADK;AACKC;AADL,SADH;AAIJM,gBAAQ,EAAE;AACRP,kBADQ;AAERS,aAAG,EAAEP,SAAS,CAAC,CAAD;AAFN;AAJN;AADD,KAAP;AAWD,GAzBY;;AA0BbQ,SAAO,EAAE;AACP,UAAMC,QAAN,GAAkB;AAChB,YAAMC,QAAO,GAAI;AACfX,aAAK,EAAE,KAAKK,IAAL,CAAUL,KADF;AAEfM,gBAAQ,EAAE,KAAKD,IAAL,CAAUC;AAFL,OAAjB;AAKA,YAAM,KAAKD,IAAL,CAAUO,MAAV,CAAiBC,OAAjB,CAAyB,OAAzB,EAAkCF,QAAlC,CAAN;AACA,WAAKG,OAAL,CAAaC,IAAb,CAAkB,GAAlB;AACF;;AATO;AA1BI,CAAf","names":["useVuelidate","required","email","minLength","setup","v$","data","form","password","validations","min","methods","onSubmit","formData","$store","dispach","$router","push"],"sourceRoot":"","sources":["C:\\vue-crm\\src\\views\\Login-crm.vue"],"sourcesContent":["<template>\r\n  <form class=\"card auth-card\" @submit.prevent=\"onSubmit\">\r\n    <div class=\"card-content\">\r\n    <span class=\"card-title\">Домашняя бухгалтерия</span>\r\n    <div class=\"input-field\" :class=\"{ error: v$.form.email.$errors.length }\">\r\n      <label for=\"\">Email</label>\r\n      <input class=\"form-control\"  type=\"email\" v-model=\"v$.form.email.$model\">\r\n      <div class=\"pre-icon os-icon os-icon-user-male-circle\"></div>\r\n          <!-- error message -->\r\n      <div class=\"input-errors\" v-for=\"(error, index) of v$.form.email.$errors\" :key=\"index\">\r\n        <div class=\"error-msg\">{{ error.$message }}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- password -->\r\n    <div class=\"input-field\" :class=\"{ error: v$.form.password.$errors.length }\">\r\n      <label for=\"\">Пароль</label>\r\n      <input class=\"form-control\"  type=\"password\" v-model=\"v$.form.password.$model\">\r\n      <div class=\"pre-icon os-icon os-icon-fingerprint\"></div>\r\n          <!-- error message -->\r\n      <div class=\"input-errors\" v-for=\"(error, index) of v$.form.password.$errors\" :key=\"index\">\r\n        <div class=\"error-msg\">{{ error.$message }}</div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n\r\n    <!-- Submit Button -->\r\n    <div class=\"card-action\">\r\n      <div>\r\n      <button class=\"btn waves-effect waves-light auth-submit\"\r\n      type=\"submit\"\r\n      :disabled=\"v$.form.$invalid\">Войти<i class=\"material-icons right\">send</i></button>\r\n      </div>\r\n    <p class=\"center\">\r\n        Нет аккаунта?\r\n        <router-link to='/register'>Зарегистрироваться</router-link>\r\n    </p>\r\n    </div>\r\n\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nimport useVuelidate from '@vuelidate/core'\r\nimport { required, email, minLength } from '@vuelidate/validators'\r\n\r\nexport default {\r\n  setup () {\r\n    return { v$: useVuelidate() }\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      form: {\r\n        email: '',\r\n        password: ''\r\n      }\r\n    }\r\n  },\r\n  validations () {\r\n    return {\r\n      form: {\r\n        email: {\r\n          required, email\r\n        },\r\n        password: {\r\n          required,\r\n          min: minLength(6)\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    async onSubmit () {\r\n      const formData = {\r\n        email: this.form.email,\r\n        password: this.form.password\r\n      }\r\n\r\n      await this.form.$store.dispach('login', formData)\r\n      this.$router.push('/')\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}